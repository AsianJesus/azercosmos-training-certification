<?php
/**
 * Created by PhpStorm.
 * User: fruit
 * Date: 1/24/2019
 * Time: 4:17 PM
 */

namespace App\Http\Controllers;


use App\Jobs\NotificationJob;
use App\Jobs\NotifyParticipantsJob;
use App\Jobs\SendParticipantPassJob;
use App\Training;
use App\TrainingParticipant;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;

class TrainingController extends Controller
{
    protected $training;
    protected $rules = [];
    const DIRECTORY = 'files/trainings';
    public function __construct(Training $training)
    {
        parent::__construct($training, $this->rules);
        $this->training = $training;
    }

    public function getQuestions(Request $request, $id) {
        $training = $this->training::findOrFail($id);
        if (!$training->is_test_exam) {
            return response('It is not test trainings', 403);
        }
        $count = $training->question_number;
        $questions = [];
        $step = floor($count / 3);
        for ($i = 1; $i <= 3; $i++) {
            $result = $training->questions()->where('difficulty', $i)->orderBy(DB::raw('RAND()'))
                ->where('verified', true)->take($step)->get();
            $questions = array_merge($questions, $result->toArray());
        }
        $ids = array_map(function ($q) {
            return $q['id'];
        }, $questions);
        $result = $training->questions()->take($count - sizeof($questions))->whereNotIn('id', $ids)
            ->where('verified', true)->orderBy(DB::raw('RAND()'))->get()->toArray();
        return array_merge($questions, $result);
    }
    public function add(Request $request)
    {
        $training = parent::add($request); // TODO: Change the autogenerated stub
        if ($request->file('file')) {
            $file = $request->file('file');
            $fileName = generateFileName(TrainingController::DIRECTORY, $file->extension());
            $file->move(TrainingController::DIRECTORY, $fileName);
            $training->file()->create(['path' => $fileName]);
        }
        foreach($request->input('observers', []) as $observer) {
            $training->observers()->create(['observer_id' => $observer]);
        }
        $participants = $request->input('participants');
        if ($participants) {
            foreach ($participants as $participant) {
                $training->participants()->create($participant);
            }
            dispatch(new NotifyParticipantsJob($training->toArray(), $participants));
        }
        return $training->load(['observers.user', 'participants.participant']);
    }
    public function getById($id)
    {
        return parent::getById($id)->load(['observers.user', 'participants.participant']); // TODO: Change the autogenerated stub
    }
    public function update(Request $request, $id)
    {
        $training = $this->training::findOrFail($id);
        $training->observers()->whereIn('id', $request->input('o_to_delete', []))->delete();
        array_map(function ($o) use ($training) {
            $training->observers()->create(['observer_id' => $o]);
        },$request->input('o_to_add', []));
        $training->participants()->whereIn('id', $request->input('p_to_delete', []))->delete();
        $participants = $request->input('p_to_add');
        if ($participants) {
            array_map(function ($p) use ($training) {
                $training->participants()->create(['participant_id ' => $p]);
            }, $participants);
            if ($request->input('p_to_add')) {
                dispatch(new NotifyParticipantsJob($training->toArray(), $participants));
            }
        }
        $file = $request->file('file');
        if ($file) {
            $name = generateFileName(TrainingController::DIRECTORY, $file->extension());
            $file->move(TrainingController::DIRECTORY, $name);
            $training->file()->updateOrCreate(['fileable_id' => $id], ['path' => $name]);
        }
        return parent::update($request, $id)->load('participants.participant', 'observers.user'); // TODO: Change the autogenerated stub
    }

    public function passTest(Request $request, $id) {
        $user_id = $request->input('user_id');
        if (!$user_id) {
            return response('No user id is presented', 405);
        }
        $training = $this->training::findOrFail($id);
        if (!$training->is_test_exam) {
            return response('It is not test exam', 403);
        }
        $participant = $training->participants()->where('participant_id', $user_id)->firstOrFail();
        if ($participant->status != 1) {
            return response($participant->status === 0 ? 'Participant didn\'t confirmed' : 'Participant has already passed', 403);
        }
        $score = max($request->input('score', 0), $participant->score);
        $hasPassed = $score >= $training->pass_score;
        if ($hasPassed) {
            $this->dispatch(new SendParticipantPassJob($id, $user_id));
        }
        return $training->participants()->where('participant_id', $user_id)
            ->update(['attempt' => $participant['attempt'] + 1, 'status' => $hasPassed ? '2' : '1', 'score' => $score]);
    }

    public function notifyParticipants (Request $request, $id) {
        dispatch(new NotificationJob($id));
        return json_encode(true);
    }
}